[[signal]]
signal
------

NAME::
signal - ANSI C signal handling.

SYNOPSIS::

[source,c]
---------------------
#include <signal.h>

void (*signal(int signum, void (*handler)(int)))(int);
---------------------

DESCRIPTION::

The signal system call installs a new signal handler for signal +signum+. The signal handler is set to handler which may be a user specified function, or one of the following:

* SIG_IGN - Ignore the signal.
* SIG_DFL - Reset the signal to its default behavior.
* SIG_IGN - Signal ignore.

Some basic signals that you can attach a signal handler too are:

. SIGABRT - Abnormal termination (generated by the abort function).
. SIGFPE - Floating-point error (error caused by division by zero, invalid operation, etc.).
. SIGILL - Illegal operation (instruction).
. SIGSEGV - Invalid access to storage (segment violation, memory violation).
. SIGTERM - Generic stop signal that can be caught.
. SIGINT - Interrupt program, normally ctrl-c.
. SIGQUIT - Interrupt program, similar to SIGINT.
. SIGKILL - Stops the program. Cannot be caught.
. SIGHUP - Reports a disconnected terminal.

["NOTE",voffset="0mm"]
In the example below CTRL+C is pressed two times during the 5 seconds wait built into the program in order to emit an interrupt signal.


RETURN VALUE::

+signal+ returns the previous value of the signal handler, or +SIG_ERR+ on error.

SEE ALSO::

+raise+

EXAMPLE::

[source,c]
---------------------
include::src/log.c[]
---------------------

OUTPUT::

.....
$ gcc -Wall signal.c
$ ./a.out 
Raising the interactive attention signal.
Interactive attention signal caught.
^CInteractive attention signal caught.
^CInteractive attention signal caught.
Exiting.
.....




